#pragma once

#include "pch.h"
#include <iostream>
#include <vector>
#include <string>
#include <map>
#include <algorithm>
#include <queue>
using namespace std;

class Node
{
public:
	string name_node;
	vector <string> neighbours;
};

class Graph
{
private:
	Node A;
	map <string, Node> graphs;
	bool orientation;   // проверка на тип графа. если граф ориентированный, то orientation = 1, иначе 0 
public:
	Graph(int solution_user) {
		orientation = solution_user;
	}
	void Add_node(string name) // добавление вершины
	{
		if (orientation == 1 || orientation == 0) {

			int counter = graphs.count(name);
			if (counter == 1) {
				cout << "Данная вершина существует" << endl;
				return;
			}
			else {
				A.name_node = "";
				graphs.insert(pair<string, Node>(name, A));
			}
		}
	}
	void Delete_node(string name) // удаление вершины
	{
		if (orientation == 1 || orientation == 0) {
			// удаляю вершину из ключей

			int counter = graphs.count(name);
			if (counter == 0) {
				cout << "Вершины не существует" << endl;
				return;
			}
			else {
				for (auto& item : graphs) {
					if (item.first == name) {
						item.second.neighbours.clear();
					}
					else {
						auto itMap = graphs.find(item.first);
						auto tmp = find(itMap->second.neighbours.begin(), itMap->second.neighbours.end(), name);
						if (count(itMap->second.neighbours.begin(), itMap->second.neighbours.end(), name) != 0)
							itMap->second.neighbours.erase(tmp);
					}
				}
				graphs.erase(name);
			}
		}
	}
	void Add_rib(string name1, string name2) // добавление ребра
	{
		bool check = Avail_rib(name1, name2);
		if (check == 1) {
			cout << "Ребро уже существует" << endl;
			return;
		}
		else {
			if (orientation == 1) { // ориентированный
				auto itMap = graphs.begin();
				itMap = graphs.find(name1);
				itMap->second.neighbours.push_back(name2);
			}

			if (orientation == 0) { // неориентированный 
				auto itMap = graphs.begin();
				itMap = graphs.find(name1);
				itMap->second.neighbours.push_back(name2);

				itMap = graphs.begin();
				itMap = graphs.find(name2);
				itMap->second.neighbours.push_back(name1);
			}
		}
	}
	void Delete_rib(string name1, string name2) // удаление ребра
	{
		bool check = Avail_rib(name1, name2);
		if (check == 0) {
			cout << "Ребро не существует" << endl;
			return;
		}
		if (orientation == 1) { // ориентированный
			auto itMap = graphs.find(name1);
			auto it = find(itMap->second.neighbours.begin(), itMap->second.neighbours.end(), name2);
			itMap->second.neighbours.erase(it);
		}

		if (orientation == 0) { //неориентированный
			auto itMap = graphs.find(name1);
			auto it = find(itMap->second.neighbours.begin(), itMap->second.neighbours.end(), name2);
			itMap->second.neighbours.erase(it);

			itMap = graphs.find(name2);
			it = find(itMap->second.neighbours.begin(), itMap->second.neighbours.end(), name1);
			itMap->second.neighbours.erase(it);
		}
	}
	void print() // вывод графа
	{
		for (auto i = graphs.begin(); i != graphs.end(); ++i)
		{
			cout << i->first << ": ";
			auto tmp = i->second.neighbours;
			for (size_t i = 0; i < tmp.size(); i++)
			{
				cout << tmp[i] + " ";
			}
			cout << endl;
		}
	}
	bool Avail_rib(string name1, string name2)   //проверка на наличие ребра между вершинами
	{
		auto itMap = graphs.begin();
		itMap = graphs.find(name1);
		int sum = 0;
		for (size_t i = 0; i < itMap->second.neighbours.size(); i++)
		{
			if (itMap->second.neighbours[i] == name2)
				sum += 1;
			else
				sum += 0;
		}
		if (sum > 0)
		{
			if (orientation == 1)
				return 1;

			if (orientation == 0)
				return 1;


		}
		else
			return 0;
	}

	void BFS(string name1, string name2) // найти кратчайшее расстояние от name1 до name2. name1 - исходная вершина, name2 -конечная
	{

		int counter = graphs.count(name1);
		if (counter == 0) {
			cout << "Вершины не существует " << name1 << endl;
			return;
		}
		counter = graphs.count(name2);
		if (counter == 0) {
			cout << "Вершины не существует " << name2 << endl;
			return;
		}

		if (orientation == 1 || orientation == 0) {
			queue<string> myQueue;
			vector<string> ex_nodes;

			ex_nodes.push_back(name1);
			myQueue.push(name1);
			int data = 0;
			while (myQueue.empty() != 1)
			{
				string tmp = myQueue.front();
				if (tmp == name2)
					break;
				auto itMap = graphs.find(tmp);
				for (size_t i = 0; i < itMap->second.neighbours.size(); i++)
				{
					int counter = count(ex_nodes.begin(), ex_nodes.end(), itMap->second.neighbours[i]);
					if (counter == 0)
					{
						ex_nodes.push_back(itMap->second.neighbours[i]);
						myQueue.push(itMap->second.neighbours[i]);
						if (itMap->second.neighbours[i] == name2) {
							data++;
							cout << "Расстояние от " << name1 << " до " << name2 << " : " << data << endl;
							return;
						}
					}
					counter = 0;
				}
				myQueue.pop();
				data++;
			}
			cout << "Путь не найден, так как ни одна вершина не соединена с искомой" << endl;
			return;
		}
	}
};


